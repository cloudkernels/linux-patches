# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will rrun. 
on:
  # Triggers the workflow on push or pull requeest events but only for the main branch
  push:
    branches:
      - main
      - action_branch
  

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains two jobs
    Patch-Linux:
     #tries to apply the patch to each version
       runs-on: [cloud]
       #strategy matrix to run jobs in parallel for each version
       strategy:
         matrix:
           versions: [ v5.7, v5.8, v5.9 ]
         fail-fast: false
       
       env:
             GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
             LINUX_VERSION: ${{ matrix.versions }}
       
       steps:
         - uses: actions/checkout@v2
         - name: install necessary packages
           run: | 
             sudo apt-get -y update
             sudo apt-get -y install build-essential libncurses-dev bc bison flex libssl-dev libelf-dev
             sudo apt-get -y install fakeroot rsync git kmod cpio
             
         - name: Clone linux
           run: |
             cd $LINUX_VERSION
             git clone https://github.com/torvalds/linux -b $LINUX_VERSION --depth 1 linux-$LINUX_VERSION
             cd linux-$LINUX_VERSION
         
         - name: Apply patches
           id: apply-patch
           #working-directory: linux-$LINUX_VERSION
           run: |
             echo ::set-output name=patch_exit_code::1
             echo "MYMSG=Patching failed for version $LINUX_VERSION" >> $GITHUB_ENV
             cd $LINUX_VERSION/linux-$LINUX_VERSION
             for i in ../*.patch
             do
                 git config user.name "CI Bot"
                 git config user.email "ci-bot@nubis-pc.eu"
                 git am $i
             done
             echo ::set-output name=patch_exit_code::0
           
           #build the linux kernel for this version. will run only if patching has succeeded
         - name: Build Kernel
           id: build-kernel
           if: steps.apply-patch.outputs.patch_exit_code == 0
           #working-directory: linux-$LINUX_VERSION
           run: |
             echo ::set-output name=build_exit_code::1
             deliverypath=$PWD
             echo "MYMSG=Building failed for version $LINUX_VERSION" >> $GITHUB_ENV
             cd $LINUX_VERSION/linux-$LINUX_VERSION
             wget https://gist.githubusercontent.com/ananos/4749c77111a560503bd9725409d82800/raw/3e65dec157a7a19d965675054ef85ce8bc06c74b/basic%2520kernel%2520config -O arch/x86/configs/kvmm.config
             touch .config
             make kvmm.config
             make deb-pkg -j $(nproc)
             echo ::set-output name=build_exit_code::$?
             sudo mkdir -p artifacts/$LINUX_VERSION
             sudo mv ../*linux-headers*.deb artifacts/$LINUX_VERSION/linux-headers-$LINUX_VERSION-latest.deb
             sudo mv ../*linux-image*.deb artifacts/$LINUX_VERSION/linux-image-$LINUX_VERSION-latest.deb
             sudo mv ../*linux-libc-dev*.deb artifacts/$LINUX_VERSION/linux-libc-dev_$LINUX_VERSION-latest.deb
             
           #If build was successful, upload the kernel deb artifacts for the kvmm module builder to have available
         - name: Upload Kernel artifact
           id: upload-artifact
           if: steps.build-kernel.outputs.build_exit_code == 0
           uses: cloudkernels/minio-upload@master
           with:
             url: https://s3.nubificus.co.uk
             access-key: ${{ secrets.AWS_ACCESS_KEY }}
             secret-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
             local-path: ${{ matrix.versions }}/linux-${{ matrix.versions }}/artifacts/${{ matrix.versions }}
             remote-path: nbfc-assets/github/linux_kernel_debs/
             
         #some (safe) shenanigans to access this specific job's logs.
         - name: Set logs link
           if: ${{ failure() }}
           run: |
             curl -i -u ${{ github.repository_owner }}:${{ secrets.GITHUB_TOKEN }} -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs > json.txt
             idparser=$(awk '/${{ matrix.versions }}/{ print NR; exit }' json.txt)
             idparser=$((idparser-11))
             idparser=$(sed "$idparser q;d" json.txt)
             idparser=$(echo $idparser | cut -c 7-)
             echo "LOGLINK=https://github.com/${{ github.repository }}/runs/$idparser?check_suite_focus=true" >> $GITHUB_ENV
           env:
             REPO: ${{ github.repository }}
             JID: ${{ github.run_id }}
           
         - name: Create Issue
           if: ${{ failure() && (steps.apply-patch.outputs.patch_exit_code != 0 || steps.build-kernel.outputs.build_exit_code != 0) }}
           uses: JasonEtco/create-an-issue@v2
           
             

